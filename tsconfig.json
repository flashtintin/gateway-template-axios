{
  "compilerOptions": {
    //设置与编译流程相关的选项。
    "target": "es5", // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
    "module": "commonjs", // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
    "strict": true, // 启用所有严格类型检查选项
    "noImplicitAny": true, // 在表达式和声明上有隐含的 any类型时报错
    "strictNullChecks": true, // 启用严格的 null 检查
    "suppressImplicitAnyIndexErrors": true,
    "jsx": "preserve", // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
    "importHelpers": true, // 从 tslib 导入辅助工具函数
    "moduleResolution": "node", // 决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认）。查看模块解析了解详情。
    "experimentalDecorators": true, // 启用实验性的ES装饰器。
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true, //	module === "system" 或设置了 --esModuleInterop 且 module 不为 es2015 / esnext esModuleInterop 且 module 不为 es2015 / esnext	允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "strictPropertyInitialization": false, // 确保类的非undefined属性已经在构造函数里初始化。若要令此选项生效，需要同时启用--strictNullChecks。
    "sourceMap": true, // 生成相应的 .map文件。
    "baseUrl": ".", // 用于解析非相对模块名称的基目录
    "noImplicitThis": false, // 当 this 表达式值为 any 类型的时候，生成一个错误
    "types": [
      // 要包含的类型声明文件名列表。
      "webpack-env"
    ],
    "paths": {
      // 模块名到基于 baseUrl的路径映射的列表。
      "@/*": ["src/*"]
    },
    "lib": [
      // 指定要包含在编译中的库文件
      "es6",
      "es5",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  },
  "include": [
    // 设置需要进行编译的文件，支持路径模式匹配；
    "src/**/*.ts",
    "src/**/*.vue"
  ],
  "exclude": [
    // 设置无需进行编译的文件，支持路径模式匹配；
    "node_modules"
  ]
}
